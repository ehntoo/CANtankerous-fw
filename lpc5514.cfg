source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

adapter speed 5000

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME lpc5514
}

if { [info exists ENDIAN] } {
   set _ENDIAN $ENDIAN
} else {
   set _ENDIAN little
}

if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x4000
}

if { [info exists M33_JTAG_TAPID] } {
   set _M33_JTAG_TAPID $M33_JTAG_TAPID
} else {
   set _M33_JTAG_TAPID 0x6ba02477
}

swj_newdap $_CHIPNAME m33 -expected-id $_M33_JTAG_TAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.m33

set _TARGETNAME $_CHIPNAME.m33
target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap
$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
flash bank ${_CHIPNAME}_flash	cmsis_flash 0 0x20000 0 0 ${_TARGETNAME} mcux-sdk/devices/LPC5514/arm/LPC551XX_128.FLM 0x1000 prefer_sector_erase

proc enable_debug_mailbox {} {
   echo "Attempting to unlock core with Debug Mailbox"
   lpc5514.dap apreg 2 0 0x21
   sleep 100

   set dm_retval [lpc5514.dap apreg 2 0]
   if {$dm_retval != 0} {
      echo "Debug mailbox failed to reset the device"
   } else {
      lpc5514.dap apreg 2 4 0x7
      echo [format "Received 0x%X from unlock attempt" [lpc5514.dap apreg 2 4]]
   }
}

$_CHIPNAME.m33 configure -event examine-start {
   set cpu_idreg [lpc5514.dap apreg 0 0xfc]
   # is the cpu hidden?
   if {$cpu_idreg == 0} {
      enable_debug_mailbox
   }
}

$_CHIPNAME.m33 configure -event reset-start {
   global last_reset_method
   set SCS_Addr 0xe000e000
   set DHCSR_Addr [expr {$SCS_Addr + 0xDF0}]

   # Program Flash Word Start/Stop Address to 0x0 to read reset vector (STARTA)
   mww 0x40034010 0x00000000 2
   # DATAW0-W7: Prepare for read
   mww 0x40034080 0x00000000 8
   # Clear FLASH Controller Status (INT_CLR_STATUS)
   mww 0x40034FE8 0x0000000F
   # Read single Flash Word (CMD_READ_SINGLE_WORD)
   mww 0x40034000 0x00000003

   # Wait for flash read to complete
   while {[expr {[mrw 0x40034fe0] & 0x4}] == 0} {}
   if {[expr {[mrw 0x40034fe0] & 0xB}] == 0} {
      echo "Reset vector is programmed, setting break at entry"
      set last_reset_method 1
      # TODO: back up any existing breakpoint address
      # breakpoint address is valid, set a breakpoint there
      mww 0xE0002008 [expr {1 | [mrw 0x4]}]
      # Enable the FPB
      mww 0xE0002000 0x3
   } else {
      echo "Reset vector read errored, setting ROM-end watchpoint"
      set last_reset_method 2
      # No valid user application so use watchpoint to break at end of boot ROM. The ROM
      # writes a special address to signal when it's done.
      # (Borrowed from PyOCD/datasheet)
      # self.write32(DWT_FUNCTION0, 0)
      # self.write32(DWT_COMP0, BOOTROM_MAGIC_ADDR)
      # self.write32(DWT_FUNCTION0, (DWT_FUNCTION_MATCH | DWT_FUNCTION_ACTION | DWT_FUNCTION_DATAVSIZE))
      # DWT_FUNCTION0           = 0xE0001028
      # DWT_FUNCTION_MATCH      = 0x4 << 0   # Instruction address.
      # DWT_FUNCTION_ACTION     = 0x1 << 4   # Generate debug event.
      # DWT_FUNCTION_DATAVSIZE  = 0x2 << 10  # 4 bytes.
      # TODO: back up any existing watchpoint address
      mww 0xE0001028 0
      mww 0xE0001020 0x50000040
      mww 0xE0001028 0x814
   }

   # Read DHCSR to clear potentially set DHCSR.S_RESET_ST bit
   mrw $DHCSR_Addr
}

$_CHIPNAME.m33 configure -event reset-deassert-post {
   sleep 100
   # TODO - restore any existing watch/breakpoint address
   if { [info exists last_reset_method]  && $last_reset_method == 1} {
      # clear fpb comparators
      mww 0xE0002008 0
      # disable fpb
      mww 0xE0002000 2
   }


   if { [info exists last_reset_method]  && $last_reset_method == 2} {
      enable_debug_mailbox
      sleep 10
      mrw $DHCSR_Addr
      echo "Issuing halt"
      mww 0xE000EDF0 2
      echo "Disabling watchpoint"
      mww 0xE0001028 0
      mww 0xE0001020 0
   }
}

# $_CHIPNAME.m33 configure -event reset-end enable_debug_mailbox

if {![using_hla]} {
   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq
}

